name: Test CloudFront Update Simulation 3

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment: dev, acc, prev or prod'
        type: environment
        required: true

jobs:
  simulate-cloudfront-update:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Simulate CloudFront distribution updates
        run: |
          echo "Starting simulation..."
          
          # Access environment variables
          distribution_ids=${{ vars.CLOUDFRONT_DISTRIB_IDS }}
          origin_names=${{ vars.CLOUDFRONT_DISTRIB_ORIGIN_NAMES }}

          echo "Distribution IDs: $distribution_ids"
          echo "Origin Names: $origin_names"

          # Convert strings to arrays
          IFS=',' read -r -a distribution_id_array <<< "$distribution_ids"
          IFS=',' read -r -a origin_names_array <<< "$origin_names"

          # Simulate processing each distribution
          for distribution_id in "${distribution_id_array[@]}"; do
            echo "Processing distribution ID: $distribution_id"
            
            # Mock the distribution config (simulating the AWS response)
            distribution_config=$(cat distribution-config.json)

            # Check if Origins.Items exists
            origins_items=$(echo "$distribution_config" | jq '.Distribution.DistributionConfig.Origins.Items')
            
            if [[ "$origins_items" == "null" || "$origins_items" == "[]" ]]; then
              # If Origins.Items is missing or empty, simulate it
              echo "Origins.Items is missing, creating default structure for distribution $distribution_id"
              distribution_config=$(echo "$distribution_config" | jq \
                '.Distribution.DistributionConfig.Origins.Items = [
                  {"DomainName": "originname_1", "CustomOriginConfig": {}}, 
                  {"DomainName": "originname_2", "CustomOriginConfig": {}}
                ]')
            fi

            # Process each origin
            for origin_name in "${origin_names_array[@]}"; do
              echo "Processing origin name: $origin_name for distribution $distribution_id"
              
              jq '.DistributionConfig.Origins.Items |= map(.CustomOriginConfig.OriginReadTimeout = 60 | .CustomOriginConfig.OriginKeepaliveTimeout = 30)' distribution-config.json > updated-config.json
              echo "Updated JSON for origin $origin_name in distribution $distribution_id"
              cat updated-config.json

              # Save the updated config to a new file
              echo "$updated_config" > updated-distribution-config.json

              # Print the updated JSON
              echo "Updated distribution config after modification:"
              cat updated-distribution-config.json
            done
          done
