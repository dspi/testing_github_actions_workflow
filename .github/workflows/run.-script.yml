name: ▶️ Run script

on:
  workflow_dispatch:
    inputs:
      script:
        description: 'Script to run (choose from src/scripts/)'
        required: true
        default: 'example-script'

      script-config:
        description: 'Script config to pass to script (choose from src/scripts/config/)'
        required: false
        default: 'example-config-collections'
        
      environment:
        description: 'Select the deployment environment'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - acc
          - prev
          - prod

jobs:
  run-script:
    name: Run script
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Transpile TypeScript
        run: npm run build:all

#      # TEST TO CHECK IF COMPILATION WORKED
#      - name: List Build Directory
#        run: ls -R .build

      - name: Validate script
        id: validate-script
        run: |
          SCRIPT_NAME="${{ github.event.inputs.script }}"
          BASE_PATH="./.build/scripts"
          
          # Ensure .js extension is present
          if [[ "$SCRIPT_NAME" != *.js ]]; then
            SCRIPT_NAME="$SCRIPT_NAME.js"
          fi
          
          SCRIPT_PATH="$BASE_PATH/$SCRIPT_NAME"

          # Validate that the script exists
          if [[ ! -f "$SCRIPT_PATH" ]]; then
            echo "Error: Script '$SCRIPT_PATH' does not exist."
            exit 1
          fi



          # TS FILE VALIDATION:
          
          TS_SCRIPT_NAME="${SCRIPT_NAME%.js}.ts"
          TS_BASE_PATH="./src/scripts"
          TS_SCRIPT_PATH="$TS_BASE_PATH/$TS_SCRIPT_NAME"
          
          # Check if the TypeScript script exists
          if [[ ! -f "$TS_SCRIPT_PATH" ]]; then
            echo "Error: TypeScript script '$TS_SCRIPT_PATH' does not exist."
            exit 1
          fi
          
          # Check if the 'validate' function is imported
          if ! grep -qE "import\s+\{\s*validate\s*\}\s+from\s+['\"]\.\.\/helpers\/validation['\"];" "$TS_SCRIPT_PATH"; then
            echo "Error: The script must import the 'validate' function from '../helpers/validation'."
            exit 1
          fi
          
          # Check if the 'validate' function is called
          if ! grep -qE "\bvalidate\s*\(" "$TS_SCRIPT_PATH"; then
            echo "Error: The 'validate' function must be called in the script."
            exit 1
          fi




          # Save for later steps
          echo "script_name=$SCRIPT_NAME" >> $GITHUB_ENV
          echo "script_path=$SCRIPT_PATH" >> $GITHUB_ENV


      - name: Validate config
        id: validate-config
        run: |
          CONFIG_NAME="${{ github.event.inputs.script-config }}"
          if CONFIG_NAME; then
          
            BASE_PATH="./.build/scripts/config"
          
            # Ensure .json extension is present
            if [[ "$CONFIG_NAME" != *.json ]]; then
              CONFIG_NAME="$CONFIG_NAME.json"
            fi
          
            CONFIG_PATH="$BASE_PATH/$CONFIG_NAME"
  
            # Validate that the script exists
            if [[ ! -f "$CONFIG_PATH" ]]; then
              echo "Error: Config '$CONFIG_PATH' does not exist."
              exit 1
            fi

            # Save for later steps
            echo "config_path=$CONFIG_PATH" >> $GITHUB_ENV
            
          fi
          
      - name: Run script with config
        id: run-script-with-config
        if: steps.config_path.outputs.config_path != ''
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          CONFIG_FILE="${{ steps.config_path.outputs.config_path }}"
          JSON_DATA=$(cat "$CONFIG_FILE")
          # echo "Running script with JSON config."
          output=$(node ${{ env.script_path "$JSON_DATA }})
          echo "script_output=$output" >> $GITHUB_ENV

        
      - name: Run script
        # If the config file does not exist, run the script without the JSON data
        if: steps.config_path.outputs.config_path == ''
        id: run-script
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        # run: node ${{ env.script_path }}
        # make script output available to next step:
        run: |
          output=$(node ${{ env.script_path }})
          echo "script_output=$output" >> $GITHUB_ENV

      - name: Write to Wiki
        #run: |
        #  echo "The script output was: ${{ env.script_output }}"
        run: node ./.build/helpers/log-to-wiki.js
        env:
          SCRIPT_NAME: ${{env.script_name}}
          RUN_ENV: ${{ github.event.inputs.environment }}
          RUN_INITIATOR: ${{ github.triggering_actor }}
          SCRIPT_OUTPUT: ${{env.script_output}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # Default GitHub token provided by Actions
          GITHUB_REPOSITORY: ${{ github.repository }} # Pass the repository info to the script
